{
module NorthHorizon.LambdaCalculator.Languages.UntypedLambda.Lexing

open NorthHorizon.LambdaCalculator.Languages.UntypedLambda.Parsing
open Microsoft.FSharp.Text.Lexing

let lexeme = LexBuffer<char>.LexemeString
}

let alpha = ['a'-'z' 'A'-'Z' 'α'-'κ' 'μ'-'ω' 'Α'-'Ω']
let number = ['0'-'9']+
let subscript = ['₀'-'₉']+
let varname = alpha (number | subscript)?

let whitespace = (' ' | '\t' | '\n' | '\r')+

rule tokenize = parse
| whitespace    { tokenize lexbuf }
| '('           { LPAREN }
| ')'           { RPAREN }
| 'λ'           { LAMBDA }
| '.'           { DOT }
| varname       { VARNAME (lexeme lexbuf) }
| eof           { EOF }